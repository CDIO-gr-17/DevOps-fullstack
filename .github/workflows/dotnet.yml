# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET CI with tests

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Ensure Docker is installed
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Load Docker cache
        id: docker-cache
        run: |
          mkdir -p /tmp/.docker
          if [[ -f /tmp/.docker/layers.tar ]]; then
            docker load -i /tmp/.docker/layers.tar || echo "No cached layers found"
          fi

      - name: Start services
        run: docker-compose up -d

      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-

      # - name: Wait for SQL Server container
      #   uses: jakejarvis/wait-action@master
      #   with:
      #     time: '5s'

      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test -c Release --no-build

      - name: Save Docker cache
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.docker
          docker save $(docker-compose config | sed -n '/image:/ s/.* //p') -o /tmp/.docker/layers.tar

      # - name: Shut down Docker Compose services
      #   run: docker-compose -f docker-compose.yml down
