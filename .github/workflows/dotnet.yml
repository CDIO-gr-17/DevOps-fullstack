# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET CI with tests

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]


jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: docker:27.2.0  # Use a Docker image with Docker and Docker Compose pre-installed
      options: --privileged  # Needed for Docker-in-Docker scenarios

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      # Ensure Docker is installed
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      # - name: Install Docker Compose
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y docker-compose

      # Spin up services with Docker Compose
      - name: Start services
        run: docker-compose up -d

      - name: Wait for SQL Server container
        uses: jakejarvis/wait-action@master
        with:
          time: '5s'

      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.0.x'

      - name: Restore NuGet packages
        run: dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      - name: Test
        run: dotnet test -c Release --no-build

      - name: Shut down Docker Compose services
        run: docker-compose -f docker-compose.yml down


# jobs:
#   build:

#     runs-on: ubuntu-latest

#     services:
#       docker:
#         image: docker:20.10.7
#         options: --privileged  # Required to run Docker in Docker

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Set up Docker
#       uses: docker/setup-buildx-action@v2

#     - name: Set up .NET Core
#       uses: actions/setup-dotnet@v3
#       with:
#         dotnet-version: 8.0.x

#     - name: Restore dependencies
#       run: dotnet restore

#     - name: Build the project
#       run: dotnet build --no-restore --configuration Release

#     - name: Wait for Database to be Ready
#       run: |
#         docker-compose -f docker-compose.yml exec -T postgres sh -c 'until pg_isready -U $POSTGRES_USER; do sleep 1; done'

#     - name: Run Tests
#       run: docker-compose -f docker-compose.yml exec backend dotnet test ./Backend.Tests/Backend.Tests.csproj --no-restore --verbosity normal


