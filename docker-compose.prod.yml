services:
  backend:
    image: holmst33n/backend:latest
    container_name: backend
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - CONNECTION_STRING=${CONNECTION_STRING}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    image: holmst33n/frontend:latest
    container_name: frontend
    environment:
      - API_URL=${API_URL}
    ports:
      - "80:80"
    networks:
      - app-network

  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - /home/azureuser/DevOps-fullstack/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "9090:9090"
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - app-network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - app-network

  cadvisor:
    image: google/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /sys:/sys
      - /var/lib/docker/:/var/lib/docker
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
